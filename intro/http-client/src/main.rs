use anyhow::{Result};
use core::str;
use embedded_svc::{
    http::{client::Client as HttpClient, Method}
};
use esp_idf_hal::prelude::Peripherals;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    http::client::{Configuration, EspHttpConnection},
};
use wifi::wifi;
use anyhow::bail;


// If using the `binstart` feature of `esp-idf-sys`, always keep this module imported
use esp_idf_sys as _;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    get("http://neverssl.com/")?;

    Ok(())
}

fn get(url: impl AsRef<str>) -> Result<()> {
    // 1. Create a new EspHttpConnection with default Configuration. (Check documentation)
    let default_config = Configuration::default();
    let conn = EspHttpConnection::new(&default_config);
    // 2. Get a client using the Client::wrap method. (Check documentation)
    let mut client = HttpClient::wrap(conn?);

    // 3. Open a GET request to `url`
    let headers = [("accept", "text/plain"), ("connection", "close")];
    let req = client.request(Method::Get, url.as_ref(), &headers)?;
    // 4. Submit the request and check the status code of the response.
    let mut resp = req.submit()?;
    let status = resp.status();
    println!("Response code: {}\n", status);
    let ok_status_range = 200..299;
    if ok_status_range.contains(&status) {
        let (_headers, body) = resp.split();
        let mut buf = [0u8; 1024];
        let mut total_bytes_read = 0;

        loop {
            match body.read(&mut buf) {
                Ok(0) => {
                    println!("Total bytes read: {}", total_bytes_read);
                    break Ok(());
                },
                Ok(bytes_read) => {
                    match std::str::from_utf8(&buf[0..bytes_read]) {
                        Ok(text) => {
                            println!("Bytes read: {}", bytes_read);
                            println!("{}", text);
                        },
                        Err(e) => bail!("Uh-oh, could read that HTML: {}", e)
                    }
                    total_bytes_read += bytes_read as u64;
                },
                Err(e) => bail!("Error reading from buffer: {}", e)
            }
        }

    } else {
        let err_msg = format!("Error fetching url: {}", url.as_ref());
        bail!("{}", &err_msg)
    }
}
